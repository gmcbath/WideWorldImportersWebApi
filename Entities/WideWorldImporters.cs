// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace Entities
{
    #region Database context interface

    public interface IWideWorldImportersDbContext : IDisposable
    {
        DbSet<Purchasing_Supplier> Purchasing_Suppliers { get; set; } // Suppliers
        DbSet<Purchasing_SupplierCategory> Purchasing_SupplierCategories { get; set; } // SupplierCategories
        DbSet<Purchasing_SupplierTransaction> Purchasing_SupplierTransactions { get; set; } // SupplierTransactions

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);
    }

    #endregion

    #region Database context

    public class WideWorldImportersDbContext : DbContext, IWideWorldImportersDbContext
    {
        public WideWorldImportersDbContext()
        {
        }

        public WideWorldImportersDbContext(DbContextOptions<WideWorldImportersDbContext> options)
            : base(options)
        {
        }

        public DbSet<Purchasing_Supplier> Purchasing_Suppliers { get; set; } // Suppliers
        public DbSet<Purchasing_SupplierCategory> Purchasing_SupplierCategories { get; set; } // SupplierCategories
        public DbSet<Purchasing_SupplierTransaction> Purchasing_SupplierTransactions { get; set; } // SupplierTransactions

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"server=(local); database=WideWorldImporters; Integrated Security=true");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.HasSequence<int>("BuyingGroupID", "Sequences").StartsAt(3).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("CityID", "Sequences").StartsAt(38187).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("ColorID", "Sequences").StartsAt(37).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("CountryID", "Sequences").StartsAt(242).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("CustomerCategoryID", "Sequences").StartsAt(9).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("CustomerID", "Sequences").StartsAt(1062).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("DeliveryMethodID", "Sequences").StartsAt(11).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("InvoiceID", "Sequences").StartsAt(70511).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("InvoiceLineID", "Sequences").StartsAt(228266).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("OrderID", "Sequences").StartsAt(73596).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("OrderLineID", "Sequences").StartsAt(231413).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("PackageTypeID", "Sequences").StartsAt(15).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("PaymentMethodID", "Sequences").StartsAt(5).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("PersonID", "Sequences").StartsAt(3262).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("PurchaseOrderID", "Sequences").StartsAt(2075).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("PurchaseOrderLineID", "Sequences").StartsAt(8368).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("SpecialDealID", "Sequences").StartsAt(3).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("StateProvinceID", "Sequences").StartsAt(54).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("StockGroupID", "Sequences").StartsAt(11).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("StockItemID", "Sequences").StartsAt(228).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("StockItemStockGroupID", "Sequences").StartsAt(443).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("SupplierCategoryID", "Sequences").StartsAt(10).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("SupplierID", "Sequences").StartsAt(14).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("SystemParameterID", "Sequences").StartsAt(2).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("TransactionID", "Sequences").StartsAt(336253).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("TransactionTypeID", "Sequences").StartsAt(14).IncrementsBy(1).IsCyclic(false);

            modelBuilder.ApplyConfiguration(new Purchasing_SupplierConfiguration());
            modelBuilder.ApplyConfiguration(new Purchasing_SupplierCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new Purchasing_SupplierTransactionConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class WideWorldImportersDbContextFactory : IDesignTimeDbContextFactory<WideWorldImportersDbContext>
    {
        public WideWorldImportersDbContext CreateDbContext(string[] args)
        {
            return new WideWorldImportersDbContext();
        }
    }

    #endregion

    #region Fake Database context

    public class FakeWideWorldImportersDbContext : IWideWorldImportersDbContext
    {
        public DbSet<Purchasing_Supplier> Purchasing_Suppliers { get; set; } // Suppliers
        public DbSet<Purchasing_SupplierCategory> Purchasing_SupplierCategories { get; set; } // SupplierCategories
        public DbSet<Purchasing_SupplierTransaction> Purchasing_SupplierTransactions { get; set; } // SupplierTransactions

        public FakeWideWorldImportersDbContext()
        {
            _database = null;

            Purchasing_Suppliers = new FakeDbSet<Purchasing_Supplier>("SupplierId");
            Purchasing_SupplierCategories = new FakeDbSet<Purchasing_SupplierCategory>("SupplierCategoryId");
            Purchasing_SupplierTransactions = new FakeDbSet<Purchasing_SupplierTransaction>("SupplierTransactionId");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }

    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable<TEntity>, IAsyncEnumerable<TEntity>, IListSource where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        IAsyncEnumerator<TEntity> IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            AddRange(entities.ToArray());
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_data); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default(CancellationToken))
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : FakeQueryProvider<TEntity>, IAsyncEnumerable<TEntity>, IAsyncQueryProvider
    {
        public FakeDbAsyncQueryProvider(Expression expression) : base(expression)
        {
        }

        public FakeDbAsyncQueryProvider(IEnumerable<TEntity> enumerable) : base(enumerable)
        {
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            var expectedResultType = typeof(TResult).GetGenericArguments()[0];
            var executionResult = typeof(IQueryProvider)
                .GetMethods()
                .First(method => method.Name == nameof(IQueryProvider.Execute) && method.IsGenericMethod)
                .MakeGenericMethod(expectedResultType)
                .Invoke(this, new object[] { expression });

            return (TResult) typeof(Task).GetMethod(nameof(Task.FromResult))
                ?.MakeGenericMethod(expectedResultType)
                .Invoke(null, new[] { executionResult });
        }

        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    public abstract class FakeQueryProvider<T> : IOrderedQueryable<T>, IQueryProvider
    {
        private IEnumerable<T> _enumerable;

        protected FakeQueryProvider(Expression expression)
        {
            Expression = expression;
        }

        protected FakeQueryProvider(IEnumerable<T> enumerable)
        {
            _enumerable = enumerable;
            Expression = enumerable.AsQueryable().Expression;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression is MethodCallExpression m)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments().First();
                return (IQueryable) CreateInstance(tElement, expression);
            }

            return CreateQuery<T>(expression);
        }

        public IQueryable<TEntity> CreateQuery<TEntity>(Expression expression)
        {
            return (IQueryable<TEntity>) CreateInstance(typeof(TEntity), expression);
        }

        private object CreateInstance(Type tElement, Expression expression)
        {
            var queryType = GetType().GetGenericTypeDefinition().MakeGenericType(tElement);
            return Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return CompileExpressionItem<object>(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return CompileExpressionItem<TResult>(expression);
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        public Type ElementType => typeof(T);

        public Expression Expression { get; }

        public IQueryProvider Provider => this;

        private static TResult CompileExpressionItem<TResult>(Expression expression)
        {
            var visitor = new FakeExpressionVisitor();
            var body = visitor.Visit(expression);
            var f = Expression.Lambda<Func<TResult>>(body ?? throw new InvalidOperationException(string.Format("{0} is null", nameof(body))), (IEnumerable<ParameterExpression>) null);
            return f.Compile()();
        }
    }

    public class FakeExpressionVisitor : ExpressionVisitor
    {
    }

    #endregion

    #region POCO classes

    // Suppliers
    /// <summary>
    /// Main entity table for suppliers (organizations)
    /// </summary>
    public class Purchasing_Supplier
    {
        /// <summary>
        /// Numeric ID used for reference to a supplier within the database
        /// </summary>
        public int SupplierId { get; set; } // SupplierID (Primary key)

        /// <summary>
        /// Supplier&apos;s full name (usually a trading name)
        /// </summary>
        public string SupplierName { get; set; } // SupplierName (length: 100)

        /// <summary>
        /// Supplier&apos;s category
        /// </summary>
        public int SupplierCategoryId { get; set; } // SupplierCategoryID

        /// <summary>
        /// Primary contact
        /// </summary>
        public int PrimaryContactPersonId { get; set; } // PrimaryContactPersonID

        /// <summary>
        /// Alternate contact
        /// </summary>
        public int AlternateContactPersonId { get; set; } // AlternateContactPersonID

        /// <summary>
        /// Standard delivery method for stock items received from this supplier
        /// </summary>
        public int? DeliveryMethodId { get; set; } // DeliveryMethodID

        /// <summary>
        /// ID of the delivery city for this address
        /// </summary>
        public int DeliveryCityId { get; set; } // DeliveryCityID

        /// <summary>
        /// ID of the mailing city for this address
        /// </summary>
        public int PostalCityId { get; set; } // PostalCityID

        /// <summary>
        /// Supplier reference for our organization (might be our account number at the supplier)
        /// </summary>
        public string SupplierReference { get; set; } // SupplierReference (length: 20)

        /// <summary>
        /// Supplier&apos;s bank account name (ie name on the account)
        /// </summary>
        public string BankAccountName { get; set; } // BankAccountName (length: 50)

        /// <summary>
        /// Supplier&apos;s bank branch
        /// </summary>
        public string BankAccountBranch { get; set; } // BankAccountBranch (length: 50)

        /// <summary>
        /// Supplier&apos;s bank account code (usually a numeric reference for the bank branch)
        /// </summary>
        public string BankAccountCode { get; set; } // BankAccountCode (length: 20)

        /// <summary>
        /// Supplier&apos;s bank account number
        /// </summary>
        public string BankAccountNumber { get; set; } // BankAccountNumber (length: 20)

        /// <summary>
        /// Supplier&apos;s bank&apos;s international code (such as a SWIFT code)
        /// </summary>
        public string BankInternationalCode { get; set; } // BankInternationalCode (length: 20)

        /// <summary>
        /// Number of days for payment of an invoice (ie payment terms)
        /// </summary>
        public int PaymentDays { get; set; } // PaymentDays

        /// <summary>
        /// Internal comments (not exposed outside organization)
        /// </summary>
        public string InternalComments { get; set; } // InternalComments

        /// <summary>
        /// Phone number
        /// </summary>
        public string PhoneNumber { get; set; } // PhoneNumber (length: 20)

        /// <summary>
        /// Fax number
        /// </summary>
        public string FaxNumber { get; set; } // FaxNumber (length: 20)

        /// <summary>
        /// URL for the website for this supplier
        /// </summary>
        public string WebsiteUrl { get; set; } // WebsiteURL (length: 256)

        /// <summary>
        /// First delivery address line for the supplier
        /// </summary>
        public string DeliveryAddressLine1 { get; set; } // DeliveryAddressLine1 (length: 60)

        /// <summary>
        /// Second delivery address line for the supplier
        /// </summary>
        public string DeliveryAddressLine2 { get; set; } // DeliveryAddressLine2 (length: 60)

        /// <summary>
        /// Delivery postal code for the supplier
        /// </summary>
        public string DeliveryPostalCode { get; set; } // DeliveryPostalCode (length: 10)

        /// <summary>
        /// First postal address line for the supplier
        /// </summary>
        public string PostalAddressLine1 { get; set; } // PostalAddressLine1 (length: 60)

        /// <summary>
        /// Second postal address line for the supplier
        /// </summary>
        public string PostalAddressLine2 { get; set; } // PostalAddressLine2 (length: 60)

        /// <summary>
        /// Postal code for the supplier when sending by mail
        /// </summary>
        public string PostalPostalCode { get; set; } // PostalPostalCode (length: 10)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_SupplierTransactions where [SupplierTransactions].[SupplierID] point to this entity (FK_Purchasing_SupplierTransactions_SupplierID_Purchasing_Suppliers)
        /// </summary>
        public virtual ICollection<Purchasing_SupplierTransaction> Purchasing_SupplierTransactions { get; set; } // SupplierTransactions.FK_Purchasing_SupplierTransactions_SupplierID_Purchasing_Suppliers

        // Foreign keys

        /// <summary>
        /// Parent Purchasing_SupplierCategory pointed by [Suppliers].([SupplierCategoryId]) (FK_Purchasing_Suppliers_SupplierCategoryID_Purchasing_SupplierCategories)
        /// </summary>
        public virtual Purchasing_SupplierCategory Purchasing_SupplierCategory { get; set; } // FK_Purchasing_Suppliers_SupplierCategoryID_Purchasing_SupplierCategories

        public Purchasing_Supplier()
        {
            Purchasing_SupplierTransactions = new List<Purchasing_SupplierTransaction>();
        }
    }

    // SupplierCategories
    /// <summary>
    /// Categories for suppliers (ie novelties, toys, clothing, packaging, etc.)
    /// </summary>
    public class Purchasing_SupplierCategory
    {
        /// <summary>
        /// Numeric ID used for reference to a supplier category within the database
        /// </summary>
        public int SupplierCategoryId { get; set; } // SupplierCategoryID (Primary key)

        /// <summary>
        /// Full name of the category that suppliers can be assigned to
        /// </summary>
        public string SupplierCategoryName { get; set; } // SupplierCategoryName (length: 50)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_Suppliers where [Suppliers].[SupplierCategoryID] point to this entity (FK_Purchasing_Suppliers_SupplierCategoryID_Purchasing_SupplierCategories)
        /// </summary>
        public virtual ICollection<Purchasing_Supplier> Purchasing_Suppliers { get; set; } // Suppliers.FK_Purchasing_Suppliers_SupplierCategoryID_Purchasing_SupplierCategories

        public Purchasing_SupplierCategory()
        {
            Purchasing_Suppliers = new List<Purchasing_Supplier>();
        }
    }

    // SupplierTransactions
    /// <summary>
    /// All financial transactions that are supplier-related
    /// </summary>
    public class Purchasing_SupplierTransaction
    {
        /// <summary>
        /// Numeric ID used to refer to a supplier transaction within the database
        /// </summary>
        public int SupplierTransactionId { get; set; } // SupplierTransactionID (Primary key)

        /// <summary>
        /// Supplier for this transaction
        /// </summary>
        public int SupplierId { get; set; } // SupplierID

        /// <summary>
        /// Type of transaction
        /// </summary>
        public int TransactionTypeId { get; set; } // TransactionTypeID

        /// <summary>
        /// ID of an purchase order (for transactions associated with a purchase order)
        /// </summary>
        public int? PurchaseOrderId { get; set; } // PurchaseOrderID

        /// <summary>
        /// ID of a payment method (for transactions involving payments)
        /// </summary>
        public int? PaymentMethodId { get; set; } // PaymentMethodID

        /// <summary>
        /// Invoice number for an invoice received from the supplier
        /// </summary>
        public string SupplierInvoiceNumber { get; set; } // SupplierInvoiceNumber (length: 20)

        /// <summary>
        /// Date for the transaction
        /// </summary>
        public DateTime TransactionDate { get; set; } // TransactionDate

        /// <summary>
        /// Transaction amount (excluding tax)
        /// </summary>
        public decimal AmountExcludingTax { get; set; } // AmountExcludingTax

        /// <summary>
        /// Tax amount calculated
        /// </summary>
        public decimal TaxAmount { get; set; } // TaxAmount

        /// <summary>
        /// Transaction amount (including tax)
        /// </summary>
        public decimal TransactionAmount { get; set; } // TransactionAmount

        /// <summary>
        /// Amount still outstanding for this transaction
        /// </summary>
        public decimal OutstandingBalance { get; set; } // OutstandingBalance

        /// <summary>
        /// Date that this transaction was finalized (if it has been)
        /// </summary>
        public DateTime? FinalizationDate { get; set; } // FinalizationDate

        /// <summary>
        /// Is this transaction finalized (invoices, credits and payments have been matched)
        /// </summary>
        public bool? IsFinalized { get; private set; } // IsFinalized
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime LastEditedWhen { get; set; } // LastEditedWhen

        // Foreign keys

        /// <summary>
        /// Parent Purchasing_Supplier pointed by [SupplierTransactions].([SupplierId]) (FK_Purchasing_SupplierTransactions_SupplierID_Purchasing_Suppliers)
        /// </summary>
        public virtual Purchasing_Supplier Purchasing_Supplier { get; set; } // FK_Purchasing_SupplierTransactions_SupplierID_Purchasing_Suppliers

        public Purchasing_SupplierTransaction()
        {
            LastEditedWhen = DateTime.Now;
        }
    }


    #endregion

    #region POCO Configuration

    // Suppliers
    public class Purchasing_SupplierConfiguration : IEntityTypeConfiguration<Purchasing_Supplier>
    {
        public void Configure(EntityTypeBuilder<Purchasing_Supplier> builder)
        {
            builder.ToTable("Suppliers", "Purchasing");
            builder.HasKey(x => x.SupplierId).HasName("PK_Purchasing_Suppliers").IsClustered();

            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[SupplierID]");
            builder.Property(x => x.SupplierName).HasColumnName(@"SupplierName").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.SupplierCategoryId).HasColumnName(@"SupplierCategoryID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PrimaryContactPersonId).HasColumnName(@"PrimaryContactPersonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.AlternateContactPersonId).HasColumnName(@"AlternateContactPersonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DeliveryMethodId).HasColumnName(@"DeliveryMethodID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DeliveryCityId).HasColumnName(@"DeliveryCityID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PostalCityId).HasColumnName(@"PostalCityID").HasColumnType("int").IsRequired();
            builder.Property(x => x.SupplierReference).HasColumnName(@"SupplierReference").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.BankAccountName).HasColumnName(@"BankAccountName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BankAccountBranch).HasColumnName(@"BankAccountBranch").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BankAccountCode).HasColumnName(@"BankAccountCode").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.BankAccountNumber).HasColumnName(@"BankAccountNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.BankInternationalCode).HasColumnName(@"BankInternationalCode").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.PaymentDays).HasColumnName(@"PaymentDays").HasColumnType("int").IsRequired();
            builder.Property(x => x.InternalComments).HasColumnName(@"InternalComments").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.FaxNumber).HasColumnName(@"FaxNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.WebsiteUrl).HasColumnName(@"WebsiteURL").HasColumnType("nvarchar(256)").IsRequired().HasMaxLength(256);
            builder.Property(x => x.DeliveryAddressLine1).HasColumnName(@"DeliveryAddressLine1").HasColumnType("nvarchar(60)").IsRequired().HasMaxLength(60);
            builder.Property(x => x.DeliveryAddressLine2).HasColumnName(@"DeliveryAddressLine2").HasColumnType("nvarchar(60)").IsRequired(false).HasMaxLength(60);
            builder.Property(x => x.DeliveryPostalCode).HasColumnName(@"DeliveryPostalCode").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);
            builder.Property(x => x.PostalAddressLine1).HasColumnName(@"PostalAddressLine1").HasColumnType("nvarchar(60)").IsRequired().HasMaxLength(60);
            builder.Property(x => x.PostalAddressLine2).HasColumnName(@"PostalAddressLine2").HasColumnType("nvarchar(60)").IsRequired(false).HasMaxLength(60);
            builder.Property(x => x.PostalPostalCode).HasColumnName(@"PostalPostalCode").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Purchasing_SupplierCategory).WithMany(b => b.Purchasing_Suppliers).HasForeignKey(c => c.SupplierCategoryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_Suppliers_SupplierCategoryID_Purchasing_SupplierCategories");

            builder.HasIndex(x => x.AlternateContactPersonId).HasDatabaseName("FK_Purchasing_Suppliers_AlternateContactPersonID");
            builder.HasIndex(x => x.DeliveryCityId).HasDatabaseName("FK_Purchasing_Suppliers_DeliveryCityID");
            builder.HasIndex(x => x.DeliveryMethodId).HasDatabaseName("FK_Purchasing_Suppliers_DeliveryMethodID");
            builder.HasIndex(x => x.PostalCityId).HasDatabaseName("FK_Purchasing_Suppliers_PostalCityID");
            builder.HasIndex(x => x.PrimaryContactPersonId).HasDatabaseName("FK_Purchasing_Suppliers_PrimaryContactPersonID");
            builder.HasIndex(x => x.SupplierCategoryId).HasDatabaseName("FK_Purchasing_Suppliers_SupplierCategoryID");
            builder.HasIndex(x => x.SupplierName).HasDatabaseName("UQ_Purchasing_Suppliers_SupplierName").IsUnique();
        }
    }

    // SupplierCategories
    public class Purchasing_SupplierCategoryConfiguration : IEntityTypeConfiguration<Purchasing_SupplierCategory>
    {
        public void Configure(EntityTypeBuilder<Purchasing_SupplierCategory> builder)
        {
            builder.ToTable("SupplierCategories", "Purchasing");
            builder.HasKey(x => x.SupplierCategoryId).HasName("PK_Purchasing_SupplierCategories").IsClustered();

            builder.Property(x => x.SupplierCategoryId).HasColumnName(@"SupplierCategoryID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[SupplierCategoryID]");
            builder.Property(x => x.SupplierCategoryName).HasColumnName(@"SupplierCategoryName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            builder.HasIndex(x => x.SupplierCategoryName).HasDatabaseName("UQ_Purchasing_SupplierCategories_SupplierCategoryName").IsUnique();
        }
    }

    // SupplierTransactions
    public class Purchasing_SupplierTransactionConfiguration : IEntityTypeConfiguration<Purchasing_SupplierTransaction>
    {
        public void Configure(EntityTypeBuilder<Purchasing_SupplierTransaction> builder)
        {
            builder.ToTable("SupplierTransactions", "Purchasing");
            builder.HasKey(x => x.SupplierTransactionId).HasName("PK_Purchasing_SupplierTransactions");

            builder.Property(x => x.SupplierTransactionId).HasColumnName(@"SupplierTransactionID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[TransactionID]");
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TransactionTypeId).HasColumnName(@"TransactionTypeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PurchaseOrderId).HasColumnName(@"PurchaseOrderID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PaymentMethodId).HasColumnName(@"PaymentMethodID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SupplierInvoiceNumber).HasColumnName(@"SupplierInvoiceNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.TransactionDate).HasColumnName(@"TransactionDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.AmountExcludingTax).HasColumnName(@"AmountExcludingTax").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.TaxAmount).HasColumnName(@"TaxAmount").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.TransactionAmount).HasColumnName(@"TransactionAmount").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.OutstandingBalance).HasColumnName(@"OutstandingBalance").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.FinalizationDate).HasColumnName(@"FinalizationDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.IsFinalized).HasColumnName(@"IsFinalized").HasColumnType("bit").IsRequired(false).ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedWhen).HasColumnName(@"LastEditedWhen").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Purchasing_Supplier).WithMany(b => b.Purchasing_SupplierTransactions).HasForeignKey(c => c.SupplierId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_SupplierTransactions_SupplierID_Purchasing_Suppliers");

            builder.HasIndex(x => x.TransactionDate).HasDatabaseName("CX_Purchasing_SupplierTransactions");
            builder.HasIndex(x => x.PaymentMethodId).HasDatabaseName("FK_Purchasing_SupplierTransactions_PaymentMethodID");
            builder.HasIndex(x => x.PurchaseOrderId).HasDatabaseName("FK_Purchasing_SupplierTransactions_PurchaseOrderID");
            builder.HasIndex(x => x.SupplierId).HasDatabaseName("FK_Purchasing_SupplierTransactions_SupplierID");
            builder.HasIndex(x => x.TransactionTypeId).HasDatabaseName("FK_Purchasing_SupplierTransactions_TransactionTypeID");
            builder.HasIndex(x => x.IsFinalized).HasDatabaseName("IX_Purchasing_SupplierTransactions_IsFinalized");
        }
    }


    #endregion

}
// </auto-generated>
